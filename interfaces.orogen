name "interfaces"
version "0.1"

import_types_from "base"
import_types_from "interfacesTypes.hpp"

task_context "Servo" do
    needs_configuration
    abstract

    property("zero_offset", "double", 0.0).
        doc "offset between the servo zero and the mounting zero"
    property("mode", "/servo/MODE", :POSITION).
       doc("mode of the module, 0 is hold position, 1 is contious sweep")
    property("lower_sweep_angle", "double", 0).
        doc("lower bound of the sweep")
    property("upper_sweep_angle", "double", 0).
        doc("upper bound of the sweep")
    property("moving_speed", "double", 0).
        doc("turning speed in rad/sec")
    property("upper_frame", "std/string", "upper_servo").
	doc "The name of the frame, where the upper part (rotating) of the servo is mounted"
    property("lower_frame", "std/string", "lower_servo").
	doc "The name of the frame, where the lower part (fixed) of the servo is mounted"
    property("rotation_axis", "base/Vector3d").
	doc "rotational axis for the upper2lower transform."

    output_port('upper2lower', '/base/samples/RigidBodyState').
	doc "transformation between the lower and upper frame. The rotational axis of the servo is specified in rotation_axis."
    output_port('angle', 'double').
	doc "current tilt angle of the servo, in radians"

    input_port('cmd_angle', 'double').
	doc "wanted tilt angle of the servo, in radians"

    operation("set_angle").
        returns('bool').
        argument("angle", "double", "set the angle of the servo, in radians")
end


task_context 'LaserRangeFinder' do
    needs_configuration

    property('remission_values',  'bool', 0).
        doc 'include remission values in output if set to true and available in the device'
    property('start_step',  'int', -1).
        doc 'the step at which to start acquisition'
    property('end_step',    'int', -1).
        doc 'the step at which to end acquisition'
    property('scan_skip',   'int', 0).
        doc 'how much acquisitions to ignore between two acquisitions to report'
    property('merge_count', 'int', 1).
        doc 'how much ranges measurement to merge into one single reported measurement'

    output_port('scans', 'base/samples/LaserScan').
        max_sizes('remission' => 2000, 'ranges' => 2000).
        doc "the laser scans themselves"
end

task_context 'IMU' do
    needs_configuration

    property("imu_frame", "std/string", "imu").
	doc "The name of the imu frame."
    property("world_frame", "std/string", "world").
	doc "The name of the world frame."

    output_port('orientation_samples', '/base/samples/RigidBodyState').
        doc 'provides timestamped IMUReading samples containing the orientation estimate as reported by the IMU.'
    output_port('calibrated_sensors', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings.'

end
